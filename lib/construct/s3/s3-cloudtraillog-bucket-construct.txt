import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as s3 from 'aws-cdk-lib/aws-s3';

export class s3Bucket extends s3.Bucket {
    constructor(scope: Construct, id: string, props?: s3.BucketProps) {
        super(scope, id, {
            ...props,
            objectOwnership: s3.ObjectOwnership.BUCKET_OWNER_ENFORCED,
        });
    }
}

(s3Bucket.prototype as any)["allowLogDelivery"] = function (
    this: s3Bucket
) {
    return null;
};

type S3CloudTrailBucketConstructProps = {
    bucketName?: string;
    cdkAutoRemove?: boolean;
    lifecycleRules?: s3.LifecycleRule[];
}

export class S3CloudTrailBucketConstruct extends Construct {
    public readonly s3Bucket: s3.Bucket;
    constructor(scope: Construct, id: string, props: S3CloudTrailBucketConstructProps) {
        super(scope, id);

        this.s3Bucket = new s3Bucket(this, 's3Bucket', {
            bucketName: props.bucketName,
            encryption: s3.BucketEncryption.S3_MANAGED,
            blockPublicAccess: {
                blockPublicAcls: true,
                blockPublicPolicy: true,
                ignorePublicAcls: true,
                restrictPublicBuckets: true
            },
            enforceSSL: true,
            removalPolicy: props.cdkAutoRemove ? cdk.RemovalPolicy.DESTROY : cdk.RemovalPolicy.RETAIN,
            lifecycleRules: props.lifecycleRules,
        });

        if (props.bucketName) {
            cdk.Tags.of(this.s3Bucket).add('Name', props.bucketName);
        }
    }
}
