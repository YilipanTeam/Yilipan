import * as cdk from 'aws-cdk-lib';
import * as s3  from 'aws-cdk-lib/aws-s3';
import { Construct } from 'constructs';
import { NamingStackProps } from '../../utils/commonTypes'
import { ResourceNameBuilder } from '../../utils/helpers'
import { VpcConstruct } from '../construct/vpc/vpc-construct';
import { AlbConstruct } from '../construct/alb/alb-construct';
import { NlbConstruct } from '../construct/nlb/nlb-construct'; 
import { Route53Construct } from '../construct/route53/route53-construct';

type WccAppConnectionStackProps = {
    namingStackProps: NamingStackProps;
    vpc: VpcConstruct;
    /**
     * ALB ACM ARN
     */
    albAcmArn: string;
    /**
     * ALB アクセスログバケット ARN
     */
    albAccessLogbucketArn?: string;
    /**
     * 監視用SNSトピック
     */
    snsAlarmTopicArn?: string;
    /**
     * アクセスログ格納用S3バケット
     */
    domainName: string; 
    /**
     * Route53ドメイン
     */
  　alb: AlbConstruct;
    /**
     * AlbConstruct
     */ 
    nlb: NlbConstruct;
    /**
     * NlbConstruct
     */ 
    route53: Route53Construct;
    /**
     * Route53Construct
     */       
    albDnsName: string;
    /**
     * albDnsDomainName
     */  
    s3AccessLogBucket?: Construct;
} & cdk.StackProps


export class WccAppConnectionStack extends cdk.Stack {
    /** ALB */
    public readonly alb: AlbConstruct;
    /** NLB */
    public readonly nlb: NlbConstruct; 
    public readonly cloudFrontAccessPermissionHeader: { key: string, val: string };
    /** Route53 */    
    public readonly route53: Route53Construct;

    constructor(scope: Construct, id: string, props: WccAppConnectionStackProps) {
        super(scope, id, props);


    /** ALB */
    this.alb = new AlbConstruct(this, 'LemsALB', {
        acmArn: props.albAcmArn,
        albSgName: ResourceNameBuilder.makeResourceNameStr({
            serviceName: 'sg',
            use: 'alb',
            ...props.namingStackProps
        }),
        albName: ResourceNameBuilder.makeResourceNameStr({
            serviceName: 'alb',
            use: `lems`,
            ...props.namingStackProps
        }),
        vpc: props.vpc.vpc,
        publicSubnets: props.vpc.publicSubnets,
        cdkAutoRemove: /^ctc[0-9]$/.test(props.namingStackProps.envKey)
    });
        let albAccessLogBucket: s3.IBucket | undefined;
        if (props.albAccessLogbucketArn) {
            albAccessLogBucket = s3.Bucket.fromBucketArn(this, 'AlbAccessLogBucket', props.albAccessLogbucketArn)
            this.alb.addAccessLog({ accessLogBucket: albAccessLogBucket })
        }
        
        
    // Route53
    this.route53 = new Route53Construct(this, 'Route53', {
        domainName: props.domainName,
        albDnsName: props.alb.alb.loadBalancerDnsName, 
    });

    

    // NLB
    this.nlb = new NlbConstruct(this, 'Nlb', {
        vpc: props.vpc.vpc,
        publicSubnets: props.vpc.publicSubnets,
        nlbName: ResourceNameBuilder.makeResourceNameStr({
            serviceName: 'nlb',
            use: 'lems',
            ...props.namingStackProps
        }),
        cdkAutoRemove: /^ctc[0-9]$/.test(props.namingStackProps.envKey),
    });
}}