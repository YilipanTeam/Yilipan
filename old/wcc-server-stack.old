import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { NamingStackProps } from '../../utils/commonTypes';
import { ResourceNameBuilder } from '../../utils/helpers';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as iam from 'aws-cdk-lib/aws-iam';

type WccOpsStackProps = {
    namingStackProps: NamingStackProps;
    vpc: ec2.Vpc;
    privateSubnets: ec2.ISubnet[];
    publicSubnets: ec2.ISubnet[];
    /**
     * EC2のインスタンスタイプ
     * @example t3.micro
     */
    instanceType?: string;
} & cdk.StackProps

export class WccOpsStack extends cdk.Stack {

    constructor(scope: Construct, id: string, props: WccOpsStackProps) {
        super(scope, id, props);
        
        // Ec2 Security Group
        const sgName = ResourceNameBuilder.makeResourceNameStr({
            serviceName: 'sg',
            use: 'bastion',
            ...props.namingStackProps
        });
        const sg = new ec2.SecurityGroup(this, 'sg-ec2-bastion', {
            vpc: props.vpc,
            securityGroupName: sgName,
            allowAllOutbound: true
        });
        cdk.Tags.of(sg).add('Name', sgName);
        // Ec2 Security Group#2
        const sg2Name = ResourceNameBuilder.makeResourceNameStr({
            serviceName: 'sg',
            use: 'other',
            ...props.namingStackProps
        });
        const sg2 = new ec2.SecurityGroup(this, 'sg-ec2-other', {
            vpc: props.vpc,
            securityGroupName: sg2Name,
            allowAllOutbound: true
        });
        cdk.Tags.of(sg2).add('Name', sg2Name);        

        // Ec2 IAM Role
        const roleName = ResourceNameBuilder.makeResourceNameStr({
            serviceName: 'role',
            use: 'bastion',
            ...props.namingStackProps
        });
        const role = new iam.Role(this, 'role-ec2-bastion', {
            assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),
            description: 'bastion ec2 role',
            roleName: roleName,
            managedPolicies: [iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonSSMManagedInstanceCore')],
        });
        cdk.Tags.of(role).add('Name', roleName);

        // EC2 Instance#1
        const instanceName = ResourceNameBuilder.makeResourceNameStr({
            serviceName: 'ec2',
            use: 'bastion',
            ...props.namingStackProps
        });
        const instance = new ec2.Instance(this, 'ec2-bastion',
            {
                vpc: props.vpc,
                vpcSubnets: { subnets: props.publicSubnets },
                instanceType: new ec2.InstanceType(props.instanceType || 't3.micro'),
                machineImage: ec2.MachineImage.latestAmazonLinux({ generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }),
                instanceName: instanceName,
                role: role,
                securityGroup: sg,
                blockDevices: [{
                    deviceName: `/dev/xvda`,
                    volume: ec2.BlockDeviceVolume.ebs(8, {
                        encrypted: true,
                        volumeType: ec2.EbsDeviceVolumeType.GP3,
                        iops: 3000,
                    }),
                }]
            }
        );
        instance.userData.addCommands(
            `hostnamectl set-hostname ${instanceName}`,
            'echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg',
            'timedatectl set-timezone Asia/Tokyo',
            'yum update -y'
        );
        // EC2終了保護
        if (!(/^ctc[0-9]$/.test(props.namingStackProps.envKey))) {
            const cfnInstance = instance.node.defaultChild as ec2.CfnInstance;
            cfnInstance.disableApiTermination = true;
        }

        cdk.Tags.of(instance).add('Name', instanceName);
        
        // EC2 Instance#2
        const instanceName2 = ResourceNameBuilder.makeResourceNameStr({
            serviceName: 'ec2',
            use: 'DeepSecurity',
            ...props.namingStackProps
        });
        const instance2 = new ec2.Instance(this, 'ec2-DeepSecurity',
            {
                vpc: props.vpc,
                vpcSubnets: { subnets: props.privateSubnets },
                instanceType: new ec2.InstanceType(props.instanceType || 't3.micro'),
                machineImage: ec2.MachineImage.latestAmazonLinux({ generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }),
                instanceName: instanceName2,
                role: role,
                securityGroup: sg,
                blockDevices: [{
                    deviceName: `/dev/xvda`,
                    volume: ec2.BlockDeviceVolume.ebs(8, {
                        encrypted: true,
                        volumeType: ec2.EbsDeviceVolumeType.GP3,
                        iops: 3000,
                    }),
                }]
            }
        );

        // EC2終了保護
        if (!(/^ctc[0-9]$/.test(props.namingStackProps.envKey))) {
            const cfnInstance2 = instance2.node.defaultChild as ec2.CfnInstance;
            cfnInstance2.disableApiTermination = true;
        }

        cdk.Tags.of(instance2).add('Name', instanceName2);  
        
        // EC2 Instance#3
        const instanceName3 = ResourceNameBuilder.makeResourceNameStr({
            serviceName: 'ec2',
            use: 'Sagyou',
            ...props.namingStackProps
        });
        const instance3 = new ec2.Instance(this, 'ec2-Sagyou',
            {
                vpc: props.vpc,
                vpcSubnets: { subnets: props.privateSubnets },
                instanceType: new ec2.InstanceType(props.instanceType || 't3.micro'),
                machineImage: ec2.MachineImage.latestAmazonLinux({ generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }),
                instanceName: instanceName3,
                role: role,
                securityGroup: sg,
                blockDevices: [{
                    deviceName: `/dev/xvda`,
                    volume: ec2.BlockDeviceVolume.ebs(8, {
                        encrypted: true,
                        volumeType: ec2.EbsDeviceVolumeType.GP3,
                        iops: 3000,
                    }),
                }]
            }
        );

        // EC2終了保護
        if (!(/^ctc[0-9]$/.test(props.namingStackProps.envKey))) {
            const cfnInstance3 = instance3.node.defaultChild as ec2.CfnInstance;
            cfnInstance3.disableApiTermination = true;
        }

        cdk.Tags.of(instance3).add('Name', instanceName3);  
        
        // EC2 Instance#4
        const instanceName4 = ResourceNameBuilder.makeResourceNameStr({
            serviceName: 'ec2',
            use: 'bat',
            ...props.namingStackProps
        });
        const instance4 = new ec2.Instance(this, 'ec2-bat',
            {
                vpc: props.vpc,
                vpcSubnets: { subnets: props.privateSubnets },
                instanceType: new ec2.InstanceType(props.instanceType || 't3.micro'),
                machineImage: ec2.MachineImage.latestAmazonLinux({ generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }),
                instanceName: instanceName4,
                role: role,
                securityGroup: sg,
                blockDevices: [{
                    deviceName: `/dev/xvda`,
                    volume: ec2.BlockDeviceVolume.ebs(8, {
                        encrypted: true,
                        volumeType: ec2.EbsDeviceVolumeType.GP3,
                        iops: 3000,
                    }),
                }]
            }
        );

        // EC2終了保護
        if (!(/^ctc[0-9]$/.test(props.namingStackProps.envKey))) {
            const cfnInstance4 = instance4.node.defaultChild as ec2.CfnInstance;
            cfnInstance4.disableApiTermination = true;
        }

        cdk.Tags.of(instance4).add('Name', instanceName4);   
        
        // EC2 Instance#5
        const instanceName5 = ResourceNameBuilder.makeResourceNameStr({
            serviceName: 'ec2',
            use: 'mail',
            ...props.namingStackProps
        });
        const instance5 = new ec2.Instance(this, 'ec2-mail',
            {
                vpc: props.vpc,
                vpcSubnets: { subnets: props.privateSubnets },
                instanceType: new ec2.InstanceType(props.instanceType || 't3.micro'),
                machineImage: ec2.MachineImage.latestAmazonLinux({ generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }),
                instanceName: instanceName5,
                role: role,
                securityGroup: sg,
                blockDevices: [{
                    deviceName: `/dev/xvda`,
                    volume: ec2.BlockDeviceVolume.ebs(8, {
                        encrypted: true,
                        volumeType: ec2.EbsDeviceVolumeType.GP3,
                        iops: 3000,
                    }),
                }]
            }
        );

        // EC2終了保護
        if (!(/^ctc[0-9]$/.test(props.namingStackProps.envKey))) {
            const cfnInstance5 = instance5.node.defaultChild as ec2.CfnInstance;
            cfnInstance5.disableApiTermination = true;
        }

        cdk.Tags.of(instance5).add('Name', instanceName5);   

        // EC2 Instance#6
        const instanceName6 = ResourceNameBuilder.makeResourceNameStr({
            serviceName: 'ec2',
            use: 'sorry',
            ...props.namingStackProps
        });
        const instance6 = new ec2.Instance(this, 'ec2-mail',
            {
                vpc: props.vpc,
                vpcSubnets: { subnets: props.privateSubnets },
                instanceType: new ec2.InstanceType(props.instanceType || 't3.micro'),
                machineImage: ec2.MachineImage.latestAmazonLinux({ generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }),
                instanceName: instanceName6,
                role: role,
                securityGroup: sg,
                blockDevices: [{
                    deviceName: `/dev/xvda`,
                    volume: ec2.BlockDeviceVolume.ebs(8, {
                        encrypted: true,
                        volumeType: ec2.EbsDeviceVolumeType.GP3,
                        iops: 3000,
                    }),
                }]
            }
        );

        // EC2終了保護
        if (!(/^ctc[0-9]$/.test(props.namingStackProps.envKey))) {
            const cfnInstance6 = instance6.node.defaultChild as ec2.CfnInstance;
            cfnInstance6.disableApiTermination = true;
        }

        cdk.Tags.of(instance6).add('Name', instanceName6);  
        
        // EC2 Instance#7
        const instanceName7 = ResourceNameBuilder.makeResourceNameStr({
            serviceName: 'ec2',
            use: 'mypage AP#1',
            ...props.namingStackProps
        });
        const instance7 = new ec2.Instance(this, 'ec2-mypage AP#1',
            {
                vpc: props.vpc,
                vpcSubnets: { subnets: props.privateSubnets },
                instanceType: new ec2.InstanceType(props.instanceType || 't3.micro'),
                machineImage: ec2.MachineImage.latestAmazonLinux({ generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }),
                instanceName: instanceName7,
                role: role,
                securityGroup: sg,
                blockDevices: [{
                    deviceName: `/dev/xvda`,
                    volume: ec2.BlockDeviceVolume.ebs(8, {
                        encrypted: true,
                        volumeType: ec2.EbsDeviceVolumeType.GP3,
                        iops: 3000,
                    }),
                }]
            }
        );

        // EC2終了保護
        if (!(/^ctc[0-9]$/.test(props.namingStackProps.envKey))) {
            const cfnInstance7 = instance7.node.defaultChild as ec2.CfnInstance;
            cfnInstance7.disableApiTermination = true;
        }

        cdk.Tags.of(instance7).add('Name', instanceName7); 
        
        // EC2 Instance#8
        const instanceName8 = ResourceNameBuilder.makeResourceNameStr({
            serviceName: 'ec2',
            use: 'mypage AP#2',
            ...props.namingStackProps
        });
        const instance8 = new ec2.Instance(this, 'ec2-mypage AP#2',
            {
                vpc: props.vpc,
                vpcSubnets: { subnets: props.privateSubnets },
                instanceType: new ec2.InstanceType(props.instanceType || 't3.micro'),
                machineImage: ec2.MachineImage.latestAmazonLinux({ generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }),
                instanceName: instanceName8,
                role: role,
                securityGroup: sg,
                blockDevices: [{
                    deviceName: `/dev/xvda`,
                    volume: ec2.BlockDeviceVolume.ebs(8, {
                        encrypted: true,
                        volumeType: ec2.EbsDeviceVolumeType.GP3,
                        iops: 3000,
                    }),
                }]
            }
        );

        // EC2終了保護
        if (!(/^ctc[0-9]$/.test(props.namingStackProps.envKey))) {
            const cfnInstance8 = instance8.node.defaultChild as ec2.CfnInstance;
            cfnInstance8.disableApiTermination = true;
        }
        cdk.Tags.of(instance8).add('Name', instanceName8); 
        
         // EC2 Instance#9
        const instanceName9 = ResourceNameBuilder.makeResourceNameStr({
            serviceName: 'ec2',
            use: 'WCC/CC AP#1',
            ...props.namingStackProps
        });
        const instance9 = new ec2.Instance(this, 'ec2-WCC/CC AP#1',
            {
                vpc: props.vpc,
                vpcSubnets: { subnets: props.privateSubnets },
                instanceType: new ec2.InstanceType(props.instanceType || 't3.micro'),
                machineImage: ec2.MachineImage.latestAmazonLinux({ generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }),
                instanceName: instanceName9,
                role: role,
                securityGroup: sg,
                blockDevices: [{
                    deviceName: `/dev/xvda`,
                    volume: ec2.BlockDeviceVolume.ebs(8, {
                        encrypted: true,
                        volumeType: ec2.EbsDeviceVolumeType.GP3,
                        iops: 3000,
                    }),
                }]
            }
        );

        // EC2終了保護
        if (!(/^ctc[0-9]$/.test(props.namingStackProps.envKey))) {
            const cfnInstance9 = instance9.node.defaultChild as ec2.CfnInstance;
            cfnInstance9.disableApiTermination = true;
        }
        cdk.Tags.of(instance9).add('Name', instanceName9);  
        
         // EC2 Instance#10
        const instanceName10 = ResourceNameBuilder.makeResourceNameStr({
            serviceName: 'ec2',
            use: 'WCC/CC AP#2',
            ...props.namingStackProps
        });
        const instance10 = new ec2.Instance(this, 'WCC/CC AP#2',
            {
                vpc: props.vpc,
                vpcSubnets: { subnets: props.privateSubnets },
                instanceType: new ec2.InstanceType(props.instanceType || 't3.micro'),
                machineImage: ec2.MachineImage.latestAmazonLinux({ generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }),
                instanceName: instanceName10,
                role: role,
                securityGroup: sg,
                blockDevices: [{
                    deviceName: `/dev/xvda`,
                    volume: ec2.BlockDeviceVolume.ebs(8, {
                        encrypted: true,
                        volumeType: ec2.EbsDeviceVolumeType.GP3,
                        iops: 3000,
                    }),
                }]
            }
        );

        // EC2終了保護
        if (!(/^ctc[0-9]$/.test(props.namingStackProps.envKey))) {
            const cfnInstance10 = instance10.node.defaultChild as ec2.CfnInstance;
            cfnInstance10.disableApiTermination = true;
        }
        cdk.Tags.of(instance10).add('Name', instanceName10);         
    }
}